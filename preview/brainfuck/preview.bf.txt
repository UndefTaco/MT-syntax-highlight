[ 这段程序在屏幕上打印"Hello World!"和一个换行符，其有效指令字符长度为106个[并非最短实现]

该循环是一个"初始注释循环"，通过这种简洁方式可为BF程序添加注释，无需担心指令字符冲突 —— 所有"."、","、"+"、"-"、"<"、">"字符均被忽略，仅需确保"["和"]"成对出现。由于当前存储单元默认值为0，该循环及其包含的指令会被跳过（0值使循环不被执行）
]

++++++++                将存储单元#0 设置为 8
[
    >++++               将存储单元#1 增加 4；因为该单元会被循环清零，这将始终设置存储单元#1 为 4
    [                   
        >++             将存储单元#2 增加 2
        >+++            将存储单元#3 增加 3
        >+++            将存储单元#4 增加 3
        >+              将存储单元#5 增加 1
        <<<<-           递减存储单元#1 中的循环计数器
    ]                   循环直到存储单元#1 为零；循环次数为 4 次
    >+                  将存储单元#2 增加 1
    >+                  将存储单元#3 增加 1
    >-                  将存储单元#4 减去 1
    >>+                 将存储单元#6 增加 1
    [<]                 回退定位到遇到的第一个值为零的存储单元；这将是之前循环清零的存储单元#1
    <-                  递减存储单元#0 中的循环计数器
]                       循环直到存储单元#0 为零；循环次数为 8 次

最终结果：
单元格：    0   1   2   3   4   5   6
存储值：    0   0  72 104  88  32   8
指针位置    ^

>>.                     存储单元#2 的值为 72，即字符 'H'
>---.                   将存储单元#3 减去 3 得到 101，即字符 'e'
+++++++..+++.           同样在存储单元#3 上操作得到 'llo'
>>.                     存储单元#5 的值为 32，即空格符
<-.                     将存储单元#4 减去 1 得到 87，即字符 'W'
<.                      存储单元#3 在 'Hello' 结尾时已被设置为 'o'
+++.------.--------.    在存储单元#3 上操作得到 'rl' 和 'd'
>>+.                    将存储单元#5 增加 1 得到感叹号 '!'
>++.                    最后在存储单元#6 上操作得到换行符
