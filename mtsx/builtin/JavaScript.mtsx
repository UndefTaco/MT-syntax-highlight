// 此文件为同名内置语法的增强版本
// 内置语法更新时，仓库会同步更新
// https://github.com/guobao2333/MT-syntax-highlight
{
    name: ["JavaScript EX", ".js", ".es", ".mjs", ".cjs"]
    comment: {startsWith: "//"}
    comment: {startsWith: "/*", endsWith: "*/"}
    defines: [
        "single-quoted-string": {
            style: "string"
            start: {match: /'/}
            end: {match: /(?m)'|$/}
            contains: [
                {match: /\\\n/, 0: "strEscape"}
                {builtin: #JAVA_ESCAPED_CHAR#}
            ]
        }
        "double-quoted-string": {
            style: "string"
            start: {match: /"/}
            end: {match: /(?m)"|$/}
            contains: [
                {match: /\\\n/, 0: "strEscape"}
                {builtin: #JAVA_ESCAPED_CHAR#}
            ]
        }
        "backtick-string": {
            style: "string"
            start: {match: /`/}
            end: {match: /`/}
            contains: [
                {match: /\\`/, 0: "strEscape"}
                {builtin: #JAVA_ESCAPED_CHAR#}
                {include: "dollarExp"}
            ]
        }
        "regex": {
            start: {match: /(?<=(?:[=,(&|!:;]|^|\breturn)\s{0,20})/ + "/"}
            end: {match: "/" + /([img]*)/, 1: "operator"}
            style: "meta"
            contains: [
                {match: /\\./, 0: "strEscape"}
                {
                    start: {match: /\[/}
                    end: {match: /\]/}
                    contains: [
                        {match: /\\./, 0: "strEscape"}
                    ]
                }
            ]
        }
        "dollarExp": {
            start: {match: /\$\{/}
            end: {match: /\}/}
            style: "strEscape"
            contains: [
                {include: "single-quoted-string"}
                {include: "double-quoted-string"}
                {include: "regex"}
                {include: "backtick-string"}
                {include: "dollarExp"}
            ]
        }
    ]
    contains: [
        {include: "single-quoted-string"}
        {include: "double-quoted-string"}
        {include: "regex"}
        {include: "backtick-string"}
        // 正则表达式
        {
            start: {match: /(?<=[=,(&|!:]\s{0,20})/ + "/"}
            end: {match: "/" + /([img]*)/, 1: "operator"}
            color: "meta"
            contains: [
                {match: /\\./, 0: "strEscape"}
                {
                    start: {match: /\[/}
                    end: {match: /\]/}
                    contains: [
                        {match: /\\./, 0: "strEscape"}
                    ]
                }
            ]
        }
        {builtin: #JAVA_NUMBER#}
        {match: /\basync(?=\s+(?:function\b|\S*\s*\())/, 0: "keyword"}
        {match: /\bget(?=:?\s+(?:function\b|\S+\s*\())/, 0: "keyword"}
        {match: keywordsToRegex(
                "break case catch class const continue debugger default delete do else enum export await"
                "extends false finally for function if implements import instanceof interface let debugger"
                "new null package private protected public return static super switch this with"
                "throw true try typeof var void while yield function of import in from as require"
        ), 0: "keyword"}
        {match: keywordsToRegex(
            "JSON Date Function Symbol RegExp Array String Number Boolean Math BigInt Map Set Object WeakMap WeakSet console globalThis Set"
        ), 0: "namespace"}
        {match: keywordsToRegex(
            "Error AggregateError EvalError RangeError ReferenceError SyntaxError TypeError URIError InternalError"
        ), 0: "error"}
        {match: keywordsToRegex("prototype Infinity NaN undefined"), 0: "operator"}
        {match: keywordsToRegex("=> === !== ~ ^ ..."), 0: "label"}
    ]
    codeFormatter: #BUILT_IN_JS_FORMATTER#
}